openapi: 3.0.3
info:
  title: Health App
  version: "1.0"
  description: |-
    My health app. Right now only supports tracking workouts.
servers:
  - url: https://health-app.com/api/v1
tags:
  - name: user
    description: operations about users
  - name: workout
    description: operations on whole workouts
  - name: setgroup
    description: operations for a group of sets
  - name: set
    description: Operations about individual sets

paths:

  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /user/login:
    post:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    delete:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{userId}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /workout:
    post:
      tags:
        - workout
      summary: create a new workout
      operationId: createWorkout
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workout'
      responses:
        '200':
          description: Success

  /workout/user/{id}:
    get:
      tags:
        - workout
      summary: get info about workout associated with the given id
      operationId: getWorkoutByUserId
      parameters:
        - name: id
          in: path
          description: The id of the set-group we want add more sets to
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetGroup'
      responses:
        '200':
          description: Success
  /workout/{id}/setGroup:
    post:
      tags:
        - workout
      summary: Create a group of sets
      operationId: createSetGroup
      parameters:
        - name: id
          in: path
          description: The id of the set-group we want add more sets to
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetGroup'
      responses:
        '200':
          description: success
  /workout/{id}/setGroup/{groupId}:
    post:
      tags:
        - workout
      summary: add a new group of sets to the set group with the given id
      operationId: setGroupAddSets
      parameters:
        - name: id
          in: path
          description: The id of the set-group we want add more sets to
          required: true
          schema:
            type: integer
            format: int64
        - name: groupId
          in: path
          description: The id of the set-group we want add more sets to
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetGroup'
      responses:
        '200':
          description: Success

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Workout:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        name:
          type: string
        completionDate:
          type: string
          format: date
        setGroups:
          type: array
          items:
              $ref: '#/components/schemas/SetGroup'

    SetGroup:
      type: object
      properties:
        totalSets:
          type: integer
          format: int32
          example: 3
        repetitions:
          type: array
          items:
            type: integer
            format: int32
          example: [10, 8, 8]
        weight:
          type: array
          items:
            type: number
            format: float
            example: 22.5
          example: [22.5, 25, 25]
        unitID:
          type: integer
          format: int32

  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header

